/*
 * generated by Xtext 2.25.0
 */
package com.mike.berezhkov.huawei.validation;

import java.util.Collection;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;

import com.mike.berezhkov.huawei.cPoCP.CPoCPPackage;
import com.mike.berezhkov.huawei.cPoCP.Model;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CPoCPValidator extends AbstractCPoCPValidator {

	@Check
	public void validateCourseAndStudentReferences(Model model) {
				
		validateUnique(model.getCourses(), "Multiple courses ", 
				course -> course.getName(), CPoCPPackage.Literals.COURSE__NAME);
		
		validateUnique(model.getStudents(), "Multiple students ", 
				student -> student.getName(), CPoCPPackage.Literals.STUDENT__NAME);
		
		validateUnique(model.getScores(), "Multiple scores for student ", 
				score -> score.getStudent().getName(), CPoCPPackage.Literals.SCORE__STUDENT);
		
		model.getScores().stream().forEach(
				score -> validateUnique(score.getCourseGrade(), "Student "+score.getStudent().getName()+" has multiple scores for course ", 
						courseGrade -> courseGrade.getCourse().getName(), CPoCPPackage.Literals.COURSE_GRADE__COURSE));
		
		/*Set<Course> allCourses = new HashSet<>(model.getCourses());
		Set<Student> allStudents = new HashSet<>(model.getStudents());
		
		model.getScores().stream().forEach( score -> {
				if(!allStudents.contains(score.getStudent())) {
					error("Student "+score.getStudent().getName()+" is not defined in the \"Students\" section.", 
							score.getStudent(), CPoCPPackage.Literals.SCORE__STUDENT);
				}
				score.getCourseGrade().stream().forEach( courseGrade -> {
					if(!allCourses.contains(courseGrade.getCourse())) {
						error("Course "+courseGrade.getCourse().getName()+" is not defined in the \"Courses\" section.", 
								courseGrade.getCourse(), CPoCPPackage.Literals.COURSE_GRADE__COURSE);
					}
				});
			});*/
	}
	
	private <T extends EObject> void validateUnique(Collection<T> set, String errorMessage, Function<T, String> getName, EStructuralFeature feature) {
		set.stream()
			.collect( Collectors.groupingBy(item -> getName.apply(item), Collectors.toList()))
			.forEach((name, list) -> {
				if(list.size()>1) {
					for(T item : list) {
						error(errorMessage+name, item, feature);
					}
				}
			});
	}
}
